name: 'Draft Release Milestone'
description: 'Updates a Github Repo when a milestone is closed'
inputs:
  release_notes_summary_path:
    description: 'Path used to save the release notes summary markdown file'
    required: false
    default: 'docs/release_notes/summary.md'
  release_notes_folder_path:
    description: 'path to the folder where the release note files are saved'
    required: false
    default: 'docs/release_notes'
outputs:
  version:
    description: "The project's semantic version x.y.z"
    value: ${{ steps.check-version.outputs.version }}
  release-id:
    description: "The ID of the created GitHub release"
    value: ${{ steps.create-release.outputs.id }}
  release-url:
    description: "Github.com URL for the created GitHub release"
    value: ${{ steps.create-release.outputs.url }}
runs:
  using: "composite"
  steps:
    - name: Check release name
      id: version-check
      run: |
        echo "Milestone Title: ${{ github.event.milestone.title }}"
        pip install semver
        SPLICED_TITLE=`echo "${{ github.event.milestone.title }}" | cut -d'v' -f 2`
        pysemver check ${SPLICED_TITLE}
        echo "::set-output name=version::$(echo $SPLICED_TITLE)"
      shell: bash -l {0}
    - name: Update version
      run: |
        if [ ! -f version ]; then
          echo "Unable to find version file in root directory. Creating version file with current milestone title."
          touch version
        fi
        echo ${{ github.event.milestone.title }} > version
      shell: bash -l {0}
    #- name: Create release_notes_folder_path
    #  run: |
    #    if [ ! -d ${{ inputs.release_notes_folder_path }} ]; then
    #      mkdir -p ${{ inputs.release_notes_folder_path }}
    #    fi
    #    ls -al ${{ inputs.release_notes_folder_path }}
    #  shell: bash -l {0}
    #- name: Remove existing file
    #  run: |
    #    if [ -f "${{ github.workspace }}/temp_${{ github.event.milestone.title }}/${{ github.event.milestone.title }}.md" ]; then
    #      rm -f ${{ github.workspace }}/temp_${{ github.event.milestone.title }}/${{ github.event.milestone.title }}.md
    #    fi
    #  shell: bash -l {0}
    - name: Create Release Notes
      uses: docker://decathlon/release-notes-generator-action:2.0.1
      env:
        GITHUB_TOKEN: ${{ github.token }}
        # OUTPUT_FOLDER: ${{ github.workspace }}
        FILENAME: raw_${{ github.event.milestone.title }}
    - name: Update Release Notes
      run: |
        # chmod 775 ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
        echo "Update Release Note"
        python ${{ github.action_path }}/update_release_note.py \
               raw_${{ github.event.milestone.title }}.md \
               ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
        rm -f raw_${{ github.event.milestone.title }}.md
        ls -al ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
        echo ""
        cat ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
        echo ""
        echo "Generate Release Notes Summary"
        # cp ${{ runner.temp }}/${{ github.event.milestone.title }}.md ${{ inputs.release_notes_folder_path }}
        python ${{ github.action_path }}/combine_release_notes.py ${{ inputs.release_notes_folder_path }} ${{ inputs.release_notes_summary_path }}
        echo ""
        cat ${{ inputs.release_notes_summary_path }}
      shell: bash -l {0}
    - uses: actions/upload-artifact@v2
      with:
        name: "release_notes"
        path: |
          ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
          ${{ inputs.release_notes_summary_path }}
    - uses: softprops/action-gh-release@v1
      id: create-release
      with:
        tag_name: ${{ github.event.milestone.title }}
        name: ${{ github.event.milestone.title }}
        body_path: ${{ inputs.release_notes_folder_path }}/${{ github.event.milestone.title }}.md
        draft: true

branding:
  icon: 'package'
  color: 'green'
