name: 'Draft Release Milestone'
description: 'Updates a Github Repo when a milestone is closed'
inputs:
  release_notes_summary_path:
    description: 'Path used to save the release notes summary markdown file'
    required: false
    default: 'docs/release_notes/summary.md'
  release_notes_folder_path:
    description: 'path to the folder where the release note files are saved'
    required: false
    default: 'docs/'
  base_env_prefix:  # id of input
    description: 'The prefix of the base Conda environment'
    required: false
    default: '/usr/share/miniconda'
outputs:
  version:
    description: "The project's semantic version"
    value: ${{ steps.build-package.outputs.PACKAGE_PATH }}
  release-notes-version:
    description: "The text of this version's release notes "
    value: ${{ steps.build-package.outputs.PACKAGE_PATH }}
  release-notes-summary:
    description: "The file path of the generated package"
    value: ${{ steps.build-package.outputs.PACKAGE_PATH }}
runs:
  using: "composite"
  steps:
    - name: Install pysemver
      run: pip install pysemver
    - name: Remove existing file
      run: |
        if [ -f "${{ github.workspace }}/temp_${{ github.event.milestone.title }}/${{ github.event.milestone.title }}.md" ]; then
          rm -f ${{ github.workspace }}/temp_${{ github.event.milestone.title }}/${{ github.event.milestone.title }}.md
        fi
    - name: Create Release Notes
      uses: docker://decathlon/release-notes-generator-action:2.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OUTPUT_FOLDER: ${{runner.temp}}/release_notes
        USE_MILESTONE_TITLE: "true"

    - name: combine outputs
      run: |
        git pull
        cd docs
        python combine_release_notes.py
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.milestone.title }}
        path: ${{ github.workspace }}/temp_${{ github.event.milestone.title }}
    - uses: actions/


    - id: build-package
      run: |
        echo "::set-output name=PACKAGE_PATH::$(echo "None")"
        echo "CHECKS"
        echo "------"
        echo "Checking for the Conda recipe"
        if [ -d ${{ inputs.recipe_path }} ]; then
          echo "Building the conda recipe at ${{ inputs.recipe_path }}"
        else
          echo "Unable to locate the conda recipe at ${{ inputs.recipe_path }}.
          Skipping the build of the conda package."
          exit 0
        fi

        echo ""
        echo "Selecting Build Env yml File"
        if [ ${{ inputs.conda_build_env_filepath }} = 'action_default' ]; then
          echo "Using the default conda configuration"
          CONDA_BUILD_ENV_FILE="${{ github.action_path }}/envs/build.yml"
        elif [ -f ${{ inputs.conda_build_env_filepath }} ]; then
          CONDA_BUILD_ENV_FILE=${{ inputs.conda_build_env_filepath }}
        else
          echo "Using the default conda configuration"
          CONDA_BUILD_ENV_FILE="${{ github.action_path }}/envs/build.yml"
        fi
        echo "CONDA_BUILD_ENV_FILE: ${CONDA_BUILD_ENV_FILE=}"
        cat "${CONDA_BUILD_ENV_FILE}"

        echo "Checking that Conda is Initialized"
        if ! command -v conda &> /dev/null; then
          echo "Conda is not setup.  Attempting to set it up."
          echo 'source ${{ inputs.base_env_prefix }}/etc/profile.d/conda.sh'
          source ${{ inputs.base_env_prefix }}/etc/profile.d/conda.sh
          if ! command -v conda &> /dev/null; then
            echo "ERROR: Failed to setup setup Conda"
            exit 1
          fi
        fi
        echo "  Conda is initialized"

        echo ""
        echo "SETUP BUILD ENV"
        echo "Set source"
        source ${{ inputs.base_env_prefix }}/etc/profile.d/conda.sh
        echo "-----------------"
        echo "Setting up ${{ github.event.repository.name }}-build environment"
        conda env update --name ${{ github.event.repository.name }}-build \
                         --file "${CONDA_BUILD_ENV_FILE}"  || \
            conda env create -f "${CONDA_BUILD_ENV_FILE}"
        conda activate ${{ github.event.repository.name }}-build
        echo "conda info"
        conda info
        echo ""
        echo "conda list"
        conda list

        echo ""
        echo "BUILD PACKAGE"
        echo "-------------"
        mkdir "test_results"
        echo "the input for build options: ${{ inputs.build_options }}"
        echo "setting build options"
        read -r -a BUILD_OPTIONS <<< '${{ inputs.build_options }}'
        echo "finished setting build options"
        echo "BUILD_OPTIONS: " "${BUILD_OPTIONS[@]}"
        OUT=`conda build --output ${{ inputs.recipe_path }}`
        echo "::set-output name=PACKAGE_PATH::$(echo $OUT)"
        echo ""
        echo "Package output path:"
        echo "  $OUT"
        echo ""
        echo 'conda build "${BUILD_OPTIONS[@]}" \
                          ${{ inputs.recipe_path }}'
        conda build "${BUILD_OPTIONS[@]}" \
                    ${{ inputs.recipe_path }}
        mkdir "${{runner.temp}}/package_outputs"
        cp -f $OUT "${{runner.temp}}/package_outputs"
      shell: bash -l {0}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.package_artifact_name }}
        path: built_package_outputs
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.test_results_artifact_name }}
        path: test_results
branding:
  icon: 'package'
  color: 'green'
